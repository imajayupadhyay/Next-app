// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  firstName       String
  lastName        String
  email           String           @unique
  phone           String           @unique
  password        String
  userData        UserData?
  resetPassTokens ResetPassToken[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model UserData {
  id          String   @id @default(uuid())
  userId      String   @unique
  tagsCovered String[]
  paidUser    Boolean  @default(false)
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  solved SolvedPractice[]
  wrong  WrongPractice[]
}


model Article {
  id        String   @id @default(uuid())
  title     String
  content   String
  slug      String   @unique
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parentSlug  String?
  parent    ParentArticle? @relation(fields: [parentSlug], references: [slug], onDelete: Cascade)
}

model ParentArticle {
  id        String   @id @default(uuid())
  title     String
  content   String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  links     Article[]
}

model DailyArticle {
  id        String   @id @default(uuid())
  title     String
  content   String
  type      String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuthToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResetPassToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  secretKey String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FormData {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Practice {
  id        String   @id @default(uuid())
  questions String
  options   String[]
  level     String
  tag       String
  answer    String
  type      String // either daily or topicwise
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  solvedBy SolvedPractice[]
  wrongBy  WrongPractice[]
}

model SolvedPractice {
  userDataId String
  practiceId String
  userData   UserData @relation(fields: [userDataId], references: [id], onDelete: Cascade)
  practice   Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)

  @@id([userDataId, practiceId])
}

model WrongPractice {
  userDataId String
  practiceId String
  userData   UserData @relation(fields: [userDataId], references: [id], onDelete: Cascade)
  practice   Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)

  @@id([userDataId, practiceId])
}
